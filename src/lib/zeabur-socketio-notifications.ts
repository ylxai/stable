/**
 * Zeabur Socket.IO Notification Helper
 * Generated by migration script on 2025-08-14T19:08:26.833Z
 */

const SOCKETIO_URL = process.env.NEXT_PUBLIC_SOCKETIO_URL || 'https://wbs.zeabur.app';

export interface NotificationData {
  eventId?: string;
  type: string;
  data: any;
  adminOnly?: boolean;
}

export class ZeaburSocketIONotifications {
  static async sendNotification(notification: NotificationData): Promise<boolean> {
    try {
      const response = await fetch(`${SOCKETIO_URL}/api/notify`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          ...notification,
          timestamp: new Date().toISOString()
        })
      });
      
      return response.ok;
    } catch (error) {
      console.error('Failed to send Socket.IO notification:', error);
      return false;
    }
  }
  
  static async notifyPhotoUpload(eventId: string, photoData: any): Promise<boolean> {
    return this.sendNotification({
      eventId,
      type: 'new-photo',
      data: {
        photoId: photoData.id,
        photoUrl: photoData.url,
        uploadedBy: photoData.uploadedBy
      }
    });
  }
  
  static async notifyNewMessage(eventId: string, messageData: any): Promise<boolean> {
    return this.sendNotification({
      eventId,
      type: 'new-message',
      data: {
        messageId: messageData.id,
        message: messageData.message,
        author: messageData.author
      }
    });
  }
  
  static async notifyAdminBackup(eventId: string, status: string, progress?: number): Promise<boolean> {
    return this.sendNotification({
      type: 'backup-status',
      adminOnly: true,
      data: {
        eventId,
        status,
        progress
      }
    });
  }
  
  static async checkHealth(): Promise<any> {
    try {
      const response = await fetch(`${SOCKETIO_URL}/health`);
      return await response.json();
    } catch (error) {
      console.error('Failed to check Socket.IO health:', error);
      return { status: 'unhealthy', error: error.message };
    }
  }
  
  static async getStats(): Promise<any> {
    try {
      const response = await fetch(`${SOCKETIO_URL}/api/stats`);
      return await response.json();
    } catch (error) {
      console.error('Failed to get Socket.IO stats:', error);
      return null;
    }
  }
}
